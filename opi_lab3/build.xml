<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build" basedir=".">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <target name="compile" depends="clean">
        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>
        <echo message="***** COMPILE COMPLETED *****"/>
    </target>

    <target name="build" depends="compile">
        <echo message="***** BUILD STARTED *****"/>
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT"/>
            </manifest>
        </war>
        <echo message="***** BUILD COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEAN STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="***** CLEAN COMPLETED *****"/>
    </target>

    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
    </target>

    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
    </target>

    <target name="test" depends="build">
        <echo message="***** TEST STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TEST COMPLETED *****"/>
    </target>

    <target name="music" depends="build">
        <exec executable="cmd.exe" failonerror="true">
            <arg line="/c start /min ${song}"/>
        </exec>

        <exec executable="powershell.exe" failonerror="true">
            <arg line="-ExecutionPolicy Bypass -File showgif.ps1"/>
        </exec>
    </target>

    <target name="report" depends="test">
        <mkdir dir="${build.dir}/test-reports"/>

        <junitreport todir="${junit.report.dir}">
            <fileset dir="${junit.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-reports/html"/>
        </junitreport>

        <exec executable="git" failonerror="false">
            <arg value="add"/>
            <arg value="${build.dir}/test-reports"/>
        </exec>

        <exec executable="git" failonerror="false">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Automated commit of JUnit test report"/>
        </exec>
    </target>

    <target name="scp" depends="build">
        <scp todir="${scp.host}" port="${scp.port}" password="${scp.password}" trust="true" >
            <fileset dir="${build.dir}">
                <include name="**/*.war" />
            </fileset>
        </scp>
    </target>

    <target name="diff">
        <exec executable="git" outputproperty="git.status" failonerror="true">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>

        <loadfile property="classes.to.check" srcFile="${basedir}/check_classes.txt">
            <filterchain>
                <tokenfilter delimoutput=","/>
            </filterchain>
        </loadfile>

        <condition property="changes.detected">
            <and>
                <contains string="${git.status}" substring="M"/>
                <contains string="${git.status}" substring="${classes.to.check}"/>
            </and>
        </condition>

        <antcall target="commit">
            <param name="message" value="Automated commit triggered by changes in specified classes"/>
        </antcall>
    </target>

    <target name="commit" if="changes.detected">
        <exec executable="git" failonerror="true">
            <arg value="add"/>
            <arg value="."/>
        </exec>

        <exec executable="git" failonerror="true">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${message}"/>
        </exec>
    </target>

    <target name="history">
        <trycatch>
            <try>
                <runtarget target="compile" />
                <echo message="--- NO ERRORS, COMPILE DONE ---" />
            </try>
            <catch>
                <exec executable="git" failonerror="true" outputproperty="git_log_head">
                    <arg value="rev-parse"/>
                    <arg value="HEAD"/>
                </exec>
                <exec executable="git" failonerror="true" outputproperty="git_log_tail">
                    <arg value="rev-list"/>
                    <arg value="--max-parents=0"/>
                    <arg value="HEAD"/>
                </exec>

                <if>
                    <equals arg1="${git_log_head}" arg2="${git_log_tail}" />
                    <then>
                        <echo message="I canffnot build the first commit. Stop" />
                        <delete file="diff" />
                    </then>
                    <else>
                        <exec executable="git" output="diff">
                            <arg value="diff" />
                            <arg value="HEAD^" />
                        </exec>
                        <exec executable="git">
                            <arg value="checkout" />
                            <arg value="HEAD^" />
                        </exec>
                        <runtarget target="history" />
                    </else>
                </if>
            </catch>
        </trycatch>
    </target>

    <target name="team">

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="HEAD^"/>
        </exec>

        <antcall target="build" />
        <zip destfile="revisions1.zip">
            <fileset dir="${build.dir}" includes="*.war" />
        </zip>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="HEAD^"/>
        </exec>

        <antcall target="build" />
        <zip destfile="revisions2.zip">
            <fileset dir="${build.dir}" includes="*.war" />
        </zip>
    </target>

    <target name="hashsums">
        <delete file="${hashsums.md5.file}" quiet="true"/>
        <delete file="${hashsums.sha1.file}" quiet="true"/>

        <checksum algorithm="MD5" fileext=".md5">
            <fileset dir="${build.dir}"/>
        </checksum>
        <checksum algorithm="SHA1" fileext=".sha1">
            <fileset dir="${build.dir}" excludes="**/*.md5"/>
        </checksum>

        <concat destfile="${hashsums.md5.file}">
            <fileset dir="${build.dir}" includes="**/*.md5"/>
        </concat>

        <concat destfile="${hashsums.sha1.file}">
            <fileset dir="${build.dir}" includes="**/*.sha1"/>
        </concat>

        <delete>
            <fileset dir="${build.dir}" includes="**/*.md5" excludes="${hashsums.md5.file.name}"/>
            <fileset dir="${build.dir}" includes="**/*.sha1" excludes="${hashsums.sha1.file.name}"/>
        </delete>
    </target>

    <target name="doc" depends="build, hashsums">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadoc" packagenames="*">
            <classpath refid="classpath" />
        </javadoc>

        <loadfile property="md5" srcFile="${hashsums.md5.file}"/>
        <loadfile property="sha1" srcFile="${hashsums.sha1.file}"/>

        <unzip src="${build.dir}/${war.name}" dest="${build.dir}">
            <patternset>
                <include name="META-INF/MANIFEST.MF"/>
            </patternset>
        </unzip>

        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <attribute name="MD5-Digest" value="${md5}"/>
            <attribute name="SHA1-Digest" value="${sha1}"/>
        </manifest>

        <war destfile="${build.dir}/${war.name}" update="true">
            <fileset dir="${build.dir}" includes="MANIFEST.MF"/>
            <fileset dir="${build.dir}/javadoc"/>
        </war>

        <delete>
            <fileset dir="${build.dir}" includes="**/*.md5"/>
            <fileset dir="${build.dir}" includes="**/*.sha1"/>
            <fileset dir="${build.dir}" includes="MANIFEST.MF"/>
        </delete>
    </target>

    <target name="alt">
        <replaceregexp file="${alt.which.class}" match="\bx\b" replace="X" flags="g"/>

        <replaceregexp file="${alt.which.class}" match="\b(y)\b" replace="Y" flags="g"/>

        <replaceregexp match="\b(${camel.case.class.name})\b" replace="${snake.case.class.name}" flags="g">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <move file="${camel.case.file}" tofile="${snake.case.file}"/>

        <antcall target="build"/>
    </target>

    <target name="alt-r">
        <replaceregexp file="${alt.which.class}" match="\bX\b" replace="x" flags="g"/>

        <replaceregexp file="${alt.which.class}" match="\bY\b" replace="y" flags="g"/>

        <replaceregexp match="\b(${snake.case.class.name})\b" replace="${camel.case.class.name}" flags="g">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <move file="${snake.case.file}" tofile="${camel.case.file}"/>

        <antcall target="build"/>
    </target>

    <target name="env" depends="build">
        <copy todir="${wildfly.dir}/standalone/deployments">
            <file file="${build.dir}/${ant.project.name}.war" />
        </copy>
        <exec executable="${env.script}"/>
    </target>

</project>